setwd("D:/Projects/course_bs/Session_04_GLM/code")
# libraries --------------------------------------------------------------------
library(cmdstanr)
library(ggplot2)
library(bayesplot)
library(posterior)
library(tidyverse)
# modelling and data prep ------------------------------------------------------
# compile the model
model <- cmdstan_model("../models/categorical.stan")
# modelling and data prep ------------------------------------------------------
# compile the model
model <- cmdstan_model("../models/categorical.stan")
# load data
data <- read.csv("../data/shot_types.csv")
# convert to factors
data$PlayerType <- as.factor(data$PlayerType)
data$ShotType <- as.factor(data$ShotType)
# contrasts
contrasts(data$PlayerType) <- contr.treatment(n_distinct(data$PlayerType))
# display contrasts
contrasts(data$PlayerType)
# note here that intercept is part of the model matrix (1st column always equals 1)
X <- model.matrix(~ Distance + PlayerType, data)
# show a couple of top rows to check if all is OK
head(X)
# dependent variable
y <- data$ShotType
# show levels of y
levels(y)
# stan_data
stan_data <- list(n=nrow(data), m=ncol(X), k=nlevels(y), X=X, y=y)
# fit
fit <- model$sample(
data = stan_data,
parallel_chains = 4
)
# modelling and data prep ------------------------------------------------------
# compile the model
model <- cmdstan_model("../models/categorical.stan")
# load data
data <- read.csv("../data/shot_types.csv")
# convert to factors
data$PlayerType <- as.factor(data$PlayerType)
data$ShotType <- as.factor(data$ShotType)
# contrasts
contrasts(data$PlayerType) <- contr.treatment(n_distinct(data$PlayerType))
# display contrasts
contrasts(data$PlayerType)
# note here that intercept is part of the model matrix (1st column always equals 1)
X <- model.matrix(~ Distance + PlayerType, data)
# show a couple of top rows to check if all is OK
head(X)
# dependent variable
y <- data$ShotType
# show levels of y
levels(y)
# stan_data
stan_data <- list(n=nrow(data), m=ncol(X), k=nlevels(y), X=X, y=y)
# fit
fit <- model$sample(
data = stan_data,
parallel_chains = 4
)
# modelling and data prep ------------------------------------------------------
# compile the model
model <- cmdstan_model("../models/categorical.stan")
# fit
fit <- model$sample(
data = stan_data,
parallel_chains = 4
)
# modelling and data prep ------------------------------------------------------
# compile the model
model <- cmdstan_model("../models/categorical.stan")
# fit
fit <- model$sample(
data = stan_data,
parallel_chains = 4
)
# modelling and data prep ------------------------------------------------------
# compile the model
model <- cmdstan_model("../models/categorical.stan")
# fit
fit <- model$sample(
data = stan_data,
parallel_chains = 4
)
View(X)
# modelling and data prep ------------------------------------------------------
# compile the model
model <- cmdstan_model("../models/categorical.stan")
# fit
fit <- model$sample(
data = stan_data,
parallel_chains = 4
)
# convert to factors
data$PlayerType <- as.factor(data$PlayerType)
data$ShotType <- as.factor(data$ShotType)
# contrasts
contrasts(data$PlayerType) <- contr.treatment(n_distinct(data$PlayerType))
# display contrasts
contrasts(data$PlayerType)
# note here that intercept is part of the model matrix (1st column always equals 1)
X <- model.matrix(~ Distance + PlayerType, data)
# show a couple of top rows to check if all is OK
head(X)
# dependent variable
y <- data$ShotType
# show levels of y
levels(y)
# stan_data
stan_data <- list(n=nrow(data), m=ncol(X), k=nlevels(y), X=X, y=y)
# fit
fit <- model$sample(
data = stan_data,
parallel_chains = 4
)
# modelling and data prep ------------------------------------------------------
# compile the model
model <- cmdstan_model("../models/categorical.stan")
# fit
fit <- model$sample(
data = stan_data,
parallel_chains = 4
)
# modelling and data prep ------------------------------------------------------
# compile the model
model <- cmdstan_model("../models/categorical.stan")
View(stan_data)
View(X)
# fit
fit <- model$sample(
data = stan_data,
parallel_chains = 4
)
# stan_data
stan_data <- list(n=nrow(data), m=ncol(X), k=nlevels(y), x=X, y=y)
# fit
fit <- model$sample(
data = stan_data,
parallel_chains = 4
)
# summary of betas
fit$summary("beta")
# analysis ---------------------------------------------------------------------
# extract parameters
df_betas <- as_draws_df(fit$draws("beta"))
df_betas <- df_betas %>% select(-.chain, -.iteration, -.draw)
# beta matrix composed of sample means
betas <- matrix(colMeans(df_betas), nrow = 4, ncol = 3)
View(betas)
View(df_betas)
# beta matrix composed of sample means
betas <- matrix(colMeans(df_betas), nrow = 3, ncol = 4)
betas
# beta matrix composed of sample means
betas <- matrix(colMeans(df_betas), nrow = 3, ncol = 4)
# helper softmax function ------------------------------------------------------
softmax <- function(x){
return(as.vector(exp(x) / sum(exp(x))))
}
# plot probabilities for guards ------------------------------------------------
precision <- 100
distance <- seq(0, 10, length.out=precision)
# probabilities for each shot type for a center shooting from 2m
# x <- c(intercept, distance, forward, guard)
x <- c(1, 0.5, 0, 0)
# calculate probabilites
c_probs <- softmax(x %*% betas)
function (x, mode = "any")
# calculate probabilites
c_probs <- softmax(betas %*% x)
# plot probabilities for guards ------------------------------------------------
precision <- 100
distance <- seq(0, 10, length.out=precision)
# probabilities for each shot type for a center shooting from 2m
# x <- c(intercept, distance, forward, guard)
x <- c(1, 0.5, 0, 0)
distance <- seq(0, 10, length.out=precision)
# probabilities for each shot type for a center shooting from 2m
# x <- c(intercept, distance, forward, guard)
x <- c(1, 0.5, 0, 0)
# calculate probabilites
c_probs <- softmax(betas %*% x)
c_probs
# probabilities for each shot type for a center shooting from 2m
# x <- c(intercept, distance, forward, guard)
x <- c(1, 0.5, 0, 0)
# calculate probabilites
c_probs <- softmax(betas %*% x)
c_probs
# calculate thetas from distance
df_thetas <- data.frame(Distance=numeric(),
Type=factor(),
Probability=numeric(),
Player=factor())
# types
types <- levels(data$ShotType)
# iterate over distance and calculate thetas
for (i in 1:precision) {
# intercept, distance, forward, guard)
x <- c(1, distance[i], 0, 1)
thetas <- softmax(betas %*% x)
df_guard <- data.frame(Distance=distance[i],
Type=types,
Probability=thetas,
Player="Guard")
# intercept, distance, forward, guard)
x <- c(1, distance[i], 1, 0)
thetas <- softmax(betas %*% x)
df_forward <- data.frame(Distance=distance[i],
Type=types,
Probability=thetas,
Player="Forward")
# intercept, distance, forward, guard)
x <- c(1, distance[i], 0, 0)
thetas <- softmax(betas %*% x)
df_centre <- data.frame(Distance=distance[i],
Type=types,
Probability=thetas,
Player="Centre")
df_thetas <- rbind(df_thetas, df_guard, df_forward, df_centre)
}
# plot
ggplot(data=df_thetas, aes(x=Distance, y=Probability, fill=Type)) +
geom_area(size=1,) +
ggtitle("Shot selection by player type") +
scale_fill_brewer(palette = "Blues") +
facet_grid(Player ~ .) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# probabilities for each shot type for a center shooting from 2m
# x <- c(intercept, distance, forward, guard)
x <- c(1, 0.5, 0, 0)
# calculate probabilites
c_probs <- softmax(betas %*% x)
c_probs
library(MASS)
data(WVS)
attach(WVS)
data(WVS)
library(MASS)
data(WVS)
install.packages("carData")
library(carData)
data(WVS)
attach(WVS)
data <- WVS
View(data)
data <- data %>% filter(Country == "USA" | Country == "Sweden")
library(tidyverse)
data <- data %>% filter(country == "USA" | country == "Sweden")
data <- write.table(data, file="../data/poverty.csv", sep=",", row.names=FALSE)
# libraries --------------------------------------------------------------------
library(cmdstanr)
library(ggplot2)
library(bayesplot)
library(posterior)
library(tidyverse)
# modelling and data prep ------------------------------------------------------
# compile the model
model <- cmdstan_model("../models/ordered.stan")
# load data
data <- read.csv("../data/poverty.csv")
View(data)
View(data)
# contrasts
contrasts(data$religion) <- contr.treatment(n_distinct(data$religion))
# load data
data <- read.csv("../data/poverty.csv", stringsAsFactors=TRUE)
# contrasts
contrasts(data$religion) <- contr.treatment(n_distinct(data$religion))
# load data
data <- read.csv("../data/weight_height_gender.csv", stringsAsFactors=TRUE)
# cast gender to 0..1
data$GenderNumeric <- as.numeric(data$Gender) - 1
View(data)
# load data
data <- read.csv("../data/shot_types.csv", stringsAsFactors=TRUE)
# contrasts
contrasts(data$PlayerType) <- contr.treatment(n_distinct(data$PlayerType))
contrasts(data$PlayerType)
# load data and treat strings as factors
data <- read.csv("../data/poverty.csv", stringsAsFactors=TRUE)
# contrasts
contrasts(data$religion) <- contr.treatment(n_distinct(data$religion))
contrasts(data$religion)
contrasts(data$country) <- contr.treatment(n_distinct(data$country))
contrasts(data$country)
contrasts(data$gender) <- contr.treatment(n_distinct(data$gender))
View(data)
# note here that intercept is part of the model matrix (1st column always equals 1)
X <- model.matrix(~ religion + degree + country + age + gender, data)
# show a couple of top rows to check if all is OK
head(X)
contrasts(data$religion)
contrasts(data$degree)
contrasts(data$country)
contrasts(data$gender)
# dependent variable
y <- data$poverty
# show levels of y
levels(y)
# stan_data
stan_data <- list(n=nrow(data), m=ncol(X), k=nlevels(y), x=X, y=y)
# fit
fit <- model$sample(
data = stan_data,
parallel_chains = 4
)
data <- sample_n(data, 50)
# contrasts
contrasts(data$religion) <- contr.treatment(n_distinct(data$religion))
contrasts(data$degree) <- contr.treatment(n_distinct(data$degree))
contrasts(data$country) <- contr.treatment(n_distinct(data$country))
contrasts(data$gender) <- contr.treatment(n_distinct(data$gender))
# note here that intercept is part of the model matrix (1st column always equals 1)
X <- model.matrix(~ religion + degree + country + age + gender, data)
# show a couple of top rows to check if all is OK
head(X)
# dependent variable
y <- data$poverty
# stan_data
stan_data <- list(n=nrow(data), m=ncol(X), k=nlevels(y), x=X, y=y)
# fit
fit <- model$sample(
data = stan_data,
parallel_chains = 4
)
# diagnostics ------------------------------------------------------------------
# traceplot for beta parameters
mcmc_trace(fit$draws("beta"))
mcmc_trace(fit$draws("c"))
# summary of betas
fit$summary("beta")
fit$summary("c")
# summary of betas
fit$summary("beta")
View(X)
# note here that intercept is part of the model matrix (1st column always equals 1)
X <- model.matrix(~ religion + degree + country + age + gender, data)
X <- X %>% select(-(Intercept))
X <- X[-1,]
View(X)
data <- sample_n(data, 50)
# contrasts
contrasts(data$religion) <- contr.treatment(n_distinct(data$religion))
contrasts(data$degree) <- contr.treatment(n_distinct(data$degree))
contrasts(data$country) <- contr.treatment(n_distinct(data$country))
contrasts(data$gender) <- contr.treatment(n_distinct(data$gender))
# note here that intercept is part of the model matrix (1st column always equals 1)
X <- model.matrix(~ religion + degree + country + age + gender, data)
X <- X[,-1]
View(X)
# show a couple of top rows to check if all is OK
head(X)
# dependent variable
y <- data$poverty
# stan_data
stan_data <- list(n=nrow(data), m=ncol(X), k=nlevels(y), x=X, y=y)
# fit
fit <- model$sample(
data = stan_data,
parallel_chains = 4
)
# diagnostics ------------------------------------------------------------------
# traceplot for beta parameters
mcmc_trace(fit$draws("beta"))
mcmc_trace(fit$draws("c"))
# analysis ---------------------------------------------------------------------
# extract parameters
df_beta <- as_draws_df(fit$draws("beta"))
df_beta <- df_beta %>% select(-.chain, -.iteration, -.draw)
# plot betas -------------------------------------------------------------------
# n of betas
n_beta <- ncol(df_beta)
# rename for ease of addressing
colnames(df_beta) <- colnames(df_X)
colnames(df_beta)
contrasts(data$country)
# rename for ease of addressing
colnames(df_beta) <- c("Religion", "Degree", "USA", "Age", "Male")
# to long format
df_beta <- df_beta %>% gather(Beta, Value)
# plot
ggplot(data = df_beta, aes(x = Value, y = Beta)) +
stat_eye(fill = "skyblue", alpha = 0.75)
library(ggdist)
# plot
ggplot(data = df_beta, aes(x = Value, y = Beta)) +
stat_eye(fill = "skyblue", alpha = 0.75)
View(data)
View(df_beta)
# analysis ---------------------------------------------------------------------
# extract parameters
df_beta <- as_draws_df(fit$draws("beta"))
View(df_beta)
df_beta <- df_beta %>% select(-.chain, -.iteration, -.draw)
# analysis ---------------------------------------------------------------------
# extract parameters
df_beta <- as_draws_df(fit$draws("beta"))
df_beta <- df_beta %>% select(-.chain, -.iteration, -.draw)
# plot betas -------------------------------------------------------------------
# rename for ease of addressing
colnames(df_beta) <- c("Religion", "Degree", "USA", "Age", "Male")
# analysis ---------------------------------------------------------------------
# extract parameters
df_beta <- as_draws_df(fit$draws("beta"))
df_beta <- df_beta %>% select(-.chain, -.iteration, -.draw)
# analysis ---------------------------------------------------------------------
# extract parameters
df_beta <- as_draws_df(fit$draws("beta"))
View(df_beta)
df_beta <- df_beta %>% select(-.chain, -.iteration, -.draw)
View(df_beta)
df_beta <- df_beta %>% select(-.chain, -.iteration, -.draw)
View(df_beta)
library(tidyverse)
df_beta <- df_beta %>% select(-.chain, -.iteration, -.draw)
df_beta <- df_beta %>% select(-.chain, -.iteration, -.draw)
data <- data %>% select(-age)
