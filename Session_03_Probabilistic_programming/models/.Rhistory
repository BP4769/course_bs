mcse(df$sigma)
library(posterior)
# convert samples to data frame
df <- as_draws_df(fit$draws())
# recover mu
mcse(df$sigma)
# libraries
library(cmdstanr)  # for interfacing Stan
library(ggplot2)   # for visualizations
library(ggdist)    # for distribution visualizations
library(tidyverse) # for data prep
library(posterior) # for extracting samples
library(bayesplot) # for some quick MCMC visualizations
library(mcmcse)    # for comparing samples and calculating MCSE
library(ggdist)    # for distribution visualizations
# compile the model
model <- cmdstan_model("../models/bernoulli_beta.stan")
# prepare the data
n <- 12
y <- c(0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0)
# prepare input data
stan_data <- list(n = n, y = y)
# fit
fit <- model$sample(
data = stan_data
)
# traceplot
mcmc_trace(fit$draws("theta"))
# summary
fit$summary()
# convert theta draws to data frame
df <- as_draws_df(fit$draws("theta"))
# mean and mcse of theta
mcse(df$theta)
# fairness
bottom_cut <- 0.3
top_cut <- 0.7
df_fair <- df %>% filter(theta > bottom_cut & theta < top_cut)
fairness <- nrow(df_fair) / nrow(df)
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# plot
ggplot(data = df, aes(x = theta)) +
stat_slab(aes(fill = stat(x < bottom_cut | x > top_cut)),
alpha=0.5,
show.legend = FALSE) +
xlim(0, 1) +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80")) +
theme(axis.text.y = element_blank(), axis.ticks = element_blank())
# plot
ggplot(data = df, aes(x = theta)) +
stat_slab(aes(fill = stat(x < bottom_cut | x > top_cut)),
alpha=0.5,
show.legend = FALSE) +
xlim(0, 1) +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
# plot
ggplot(data = df, aes(x = theta)) +
stat_slab(aes(fill = stat(x < bottom_cut | x > top_cut)),
alpha=0.5,
show.legend = FALSE,
normalize = "none",
scale = 1) +
xlim(0, 1) +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
# plot
ggplot(data = df, aes(x = theta)) +
stat_slab(aes(fill = stat(x < bottom_cut | x > top_cut)),
alpha=0.5,
show.legend = FALSE,
normalize = "none",
scale = 1) +
xlim(0, 1) +
ylim(0, 2) +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
# plot
ggplot(data = df, aes(x = theta)) +
stat_slab(aes(fill = stat(x < bottom_cut | x > top_cut)),
alpha=0.5,
show.legend = FALSE,
normalize = "none",
scale = 1) +
xlim(0, 1) +
ylim(0, 3) +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
# set parameters
alpha <- 6
beta <- 8
# plot
df <- data.frame(dist = "beta")
ggplot(data = df, aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_slab(alpha = 0.5, fill = "#67a9cf", normalize = "none", scale = 1) +
xlim(0, 1) +
ylim(0, 3) +
xlab("probability") +
ylab("density") +
theme_minimal() +
theme(axis.text.y = element_blank(), axis.ticks = element_blank())
ggplot(data = df, aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_slab(alpha = 0.5, fill = "#67a9cf", normalize = "none", scale = 1) +
xlim(0, 1) +
ylim(0, 3) +
xlab("probability") +
ylab("density") +
theme_minimal()
ggplot(data = df, aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_slab(alpha = 0.5, fill = "#67a9cf", normalize = "none") +
xlim(0, 1) +
ylim(0, 3) +
xlab("probability") +
ylab("density") +
theme_minimal()
ggplot(data = df, aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_slab(alpha = 0.5, fill = "#67a9cf", normalize = "none") +
xlim(0, 1) +
ylim(0, 3) +
xlab("probability") +
ylab("density") +
theme_minimal()
, scale = 1
ggplot(data = df, aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_slab(alpha = 0.5, fill = "#67a9cf", normalize = "none", scale = 1) +
xlim(0, 1) +
ylim(0, 3) +
xlab("probability") +
ylab("density") +
theme_minimal()
# set parameters
alpha <- 6
beta <- 8
# bottom and top cuts for fairness
bottom_cut <- 0.3
top_cut <- 0.7
# fairness
fairness <- pbeta(top_cut, alpha, beta) - pbeta(bottom_cut, alpha, beta)
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
ggplot(data = df, aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_slab(aes(fill = stat(x < bottom_cut | x > top_cut)),
alpha=0.5,
show.legend = FALSE,
normalize = "none",
scale = 1) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
ggplot(data = df, aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_slab(aes(fill = stat(x < bottom_cut | x > top_cut)),
alpha=0.5,
show.legend = FALSE,
normalize = "none",
scale = 1) +
xlim(0, 1) +
ylim(0, 3) +
xlab("probability") +
ylab("density") +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
# libraries
library(ggplot2)
# set grid resolution
resolution <- 100
# create the grid
grid <- seq(from = 0, to = 1, length.out = resolution)
# prior
prior <- rep(1, resolution)
# data
n <- 12
z <- 5
# likelihood
likelihood <- dbinom(z, n, prob=grid)
# posterior
posterior <- likelihood * prior
# normalize the posterior so it sums to 1
posterior <- posterior / sum(posterior)
# fairness
bottom_cut <- 0.3 * resolution
top_cut <- 0.7 * resolution
fairness <- sum(posterior[bottom_cut:top_cut])
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
ggplot(data = df, aes(x = x, y = y)) +
geom_line(color = "#67a9cf", size = 1) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal() +
theme(axis.text.y = element_blank(), axis.ticks = element_blank())
# libraries
library(ggplot2)
# set grid resolution
resolution <- 100
# create the grid
grid <- seq(from = 0, to = 1, length.out = resolution)
# prior
prior <- rep(1, resolution)
# data
n <- 12
z <- 5
# likelihood
likelihood <- dbinom(z, n, prob=grid)
# posterior
posterior <- likelihood * prior
# normalize the posterior so it sums to 1
posterior <- posterior / sum(posterior)
# fairness
bottom_cut <- 0.3 * resolution
top_cut <- 0.7 * resolution
fairness <- sum(posterior[bottom_cut:top_cut])
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# visualize
df <- data.frame(x = grid, y = posterior)
ggplot(data = df, aes(x = x, y = y)) +
geom_line(color = "#67a9cf", size = 1) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal()
# libraries
library(cmdstanr)  # for interfacing Stan
library(ggplot2)   # for visualizations
library(ggdist)    # for distribution visualizations
library(tidyverse) # for data prep
library(posterior) # for extracting samples
library(bayesplot) # for some quick MCMC visualizations
library(mcmcse)    # for comparing samples and calculating MCSE
library(ggdist)    # for distribution visualizations
# compile the model
model <- cmdstan_model("../models/bernoulli_beta.stan")
# prepare the data
n <- 12
y <- c(0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0)
# prepare input data
stan_data <- list(n = n, y = y)
# fit
fit <- model$sample(
data = stan_data
)
# traceplot
mcmc_trace(fit$draws("theta"))
# summary
fit$summary()
# convert theta draws to data frame
df <- as_draws_df(fit$draws("theta"))
# mean and mcse of theta
mcse(df$theta)
# fairness
bottom_cut <- 0.3
top_cut <- 0.7
df_fair <- df %>% filter(theta > bottom_cut & theta < top_cut)
fairness <- nrow(df_fair) / nrow(df)
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# plot
ggplot(data = df, aes(x = theta)) +
stat_slab(aes(fill = stat(x < bottom_cut | x > top_cut)),
alpha=0.5,
show.legend = FALSE,
normalize = "none",
scale = 1) +
xlim(0, 1) +
ylim(0, 3) +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
# plot
ggplot(data = df, aes(x = theta)) +
stat_slab(aes(fill = stat(x < bottom_cut | x > top_cut)),
alpha=0.5,
show.legend = FALSE,
normalize = "none",
scale = 1) +
xlim(0, 1) +
ylim(0, 3) +
ylab("density") +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
# set parameters
alpha <- 6
beta <- 8
# plot
df <- data.frame(dist = "beta")
ggplot(data = df, aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_slab(alpha = 0.5, fill = "#67a9cf", normalize = "none", scale = 1) +
xlim(0, 1) +
ylim(0, 3) +
xlab("probability") +
ylab("density") +
theme_minimal()
ggplot(data = df, aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_slab(alpha = 0.5, fill = "#67a9cf", normalize = "none", scale = 1) +
xlim(0, 1) +
ylim(0, 3) +
xlab("theta") +
ylab("density") +
theme_minimal()
ggplot(data = df, aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_slab(alpha = 0.5, fill = "#67a9cf", normalize = "none", scale = 1) +
xlim(0, 1) +
ylim(0, 3) +
xlab("") +
ylab("density") +
theme_minimal()
# set parameters
alpha <- 6
beta <- 8
# bottom and top cuts for fairness
bottom_cut <- 0.3
top_cut <- 0.7
# fairness
fairness <- pbeta(top_cut, alpha, beta) - pbeta(bottom_cut, alpha, beta)
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# plot
df <- data.frame(dist = "beta")
ggplot(data = df, aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_slab(aes(fill = stat(x < bottom_cut | x > top_cut)),
alpha=0.5,
show.legend = FALSE,
normalize = "none",
scale = 1) +
xlim(0, 1) +
ylim(0, 3) +
xlab("") +
ylab("density") +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
# libraries
library(ggplot2)
# set grid resolution
resolution <- 100
# create the grid
grid <- seq(from = 0, to = 1, length.out = resolution)
# prior
prior <- rep(1, resolution)
# data
n <- 12
z <- 5
# likelihood
likelihood <- dbinom(z, n, prob=grid)
# posterior
posterior <- likelihood * prior
# normalize the posterior so it sums to 1
posterior <- posterior / sum(posterior)
# fairness
bottom_cut <- 0.3 * resolution
top_cut <- 0.7 * resolution
fairness <- sum(posterior[bottom_cut:top_cut])
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# visualize
df <- data.frame(x = grid, y = posterior)
ggplot(data = df, aes(x = x, y = y)) +
geom_line(color = "#67a9cf", size = 1) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal() +
theme(axis.text.y = element_blank(), axis.ticks = element_blank())
# libraries
library(ggplot2)
# set grid resolution
resolution <- 100
# create the grid
grid <- seq(from = 0, to = 1, length.out = resolution)
# prior
prior <- rep(1, resolution)
# data
n <- 12
z <- 5
# likelihood
likelihood <- dbinom(z, n, prob=grid)
# posterior
posterior <- likelihood * prior
# normalize the posterior so it sums to 1
posterior <- posterior / sum(posterior)
# fairness
bottom_cut <- 0.3 * resolution
top_cut <- 0.7 * resolution
fairness <- sum(posterior[bottom_cut:top_cut])
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# visualize
df <- data.frame(x = grid, y = posterior)
ggplot(data = df, aes(x = x, y = y)) +
geom_line(color = "#67a9cf", size = 1) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal() +
theme(axis.text.y = element_blank(), axis.ticks = element_blank())
sum(posterior)
ggplot(data = df, aes(x = x, y = y)) +
geom_bar() +
#geom_line(color = "#67a9cf", size = 1) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal() +
theme(axis.text.y = element_blank(), axis.ticks = element_blank())
ggplot(data = df, aes(x = x, y = y)) +
geom_bar(stat="identity") +
#geom_line(color = "#67a9cf", size = 1) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal() +
theme(axis.text.y = element_blank(), axis.ticks = element_blank())
ggplot(data = df, aes(x = x, y = y)) +
geom_bar(stat="identity", color=NA, fill="#67a9cf") +
#geom_line(color = "#67a9cf", size = 1) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal()
ggplot(data = df, aes(x = x, y = y)) +
geom_bar(stat="identity", color=NA, fill="#67a9cf", alpha = 0.5) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal()
ggplot(data = df, aes(x = x, y = y)) +
geom_bar(stat="identity", color=NA, fill="#67a9cf", alpha = 0.5) +
xlim(0, 1) +
xlab("") +
ylab("density") +
theme_minimal()
ggplot(data = df, aes(x = x, y = y)) +
geom_bar(stat="identity", color=NA, fill="#67a9cf", alpha = 0.5, width=.5) +
xlim(0, 1) +
xlab("") +
ylab("density") +
theme_minimal()
ggplot(data = df, aes(x = x, y = y)) +
geom_bar(stat="identity", color=NA, fill="#67a9cf", alpha = 0.5, width=.1) +
xlim(0, 1) +
xlab("") +
ylab("density") +
theme_minimal()
ggplot(data = df, aes(x = x, y = y)) +
geom_bar(stat="identity", color=NA, fill="#67a9cf", alpha = 0.5, width=.01) +
xlim(0, 1) +
xlab("") +
ylab("density") +
theme_minimal()
ggplot(data = df, aes(x = x, y = y)) +
geom_bar(stat="identity", color=NA, fill="#67a9cf", alpha = 0.5) +
xlim(0, 1) +
xlab("") +
ylab("density") +
theme_minimal()
ggplot(data = df, aes(x = x, y = y)) +
geom_bar(stat="identity", color="#67a9cf", fill="#67a9cf", alpha = 0.5) +
xlim(0, 1) +
xlab("") +
ylab("density") +
theme_minimal()
# libraries
library(cmdstanr)  # for interfacing Stan
library(ggplot2)   # for visualizations
library(ggdist)    # for distribution visualizations
library(tidyverse) # for data prep
library(posterior) # for extracting samples
library(bayesplot) # for some quick MCMC visualizations
library(mcmcse)    # for comparing samples and calculating MCSE
library(ggdist)    # for distribution visualizations
# compile the model
model <- cmdstan_model("../models/bernoulli_beta.stan")
# prepare the data
n <- 12
y <- c(0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0)
# prepare input data
stan_data <- list(n = n, y = y)
# fit
fit <- model$sample(
data = stan_data
)
# traceplot
mcmc_trace(fit$draws("theta"))
# summary
fit$summary()
# convert theta draws to data frame
df <- as_draws_df(fit$draws("theta"))
# mean and mcse of theta
mcse(df$theta)
# fairness
bottom_cut <- 0.3
top_cut <- 0.7
df_fair <- df %>% filter(theta > bottom_cut & theta < top_cut)
fairness <- nrow(df_fair) / nrow(df)
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# plot
ggplot(data = df, aes(x = theta)) +
stat_slab(aes(fill = stat(x < bottom_cut | x > top_cut)),
alpha=0.5,
show.legend = FALSE,
normalize = "none",
scale = 1) +
xlim(0, 1) +
ylim(0, 3) +
ylab("density") +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
# plot
ggplot(data = df, aes(x = theta)) +
stat_slab(aes(fill = stat(x < bottom_cut | x > top_cut)),
alpha=0.5,
show.legend = FALSE) +
xlim(0, 1) +
ylim(0, 3) +
ylab("density") +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
