stat_halfeye(alpha = 0.5, fill="#67a9cf") +
xlim(0, 1) +
theme_minimal()
library(ggplot2)
library(ggdist)
library(distributional)
library(tidyverse)
# set parameters
alpha <- 6
beta <- 6
# bottom and top cuts for fairness
bottom_cut <- 0.3
top_cut <- 0.7
# fairness
fairness <- pbeta(top_cut, alpha, beta) - pbeta(bottom_cut, alpha, beta)
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# plot
data.frame(dist = "beta") %>%
ggplot(aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_halfeye(aes(fill = stat(x < bottom_cut | x > top_cut)),
alpha=0.5,
show.legend = FALSE) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
data.frame(dist = "beta") %>%
ggplot(aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_halfeye(aes(fill = stat(x < bottom_cut | x > top_cut)),
color=NA,
alpha=0.5,
show.legend = FALSE) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
library(tidyverse)
# set parameters
alpha <- 10
beta <- 5
# precision
data.frame(dist = "beta") %>%
ggplot(aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_halfeye(alpha = 0.5, fill = "#67a9cf", color = NA) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal()
ggplot(data = df, aes(x = x, y = y)) +
geom_line(color = "#67a9cf", size = 1) +
theme_minimal()
# set parameters
alpha <- 6
beta <- 6
# bottom and top cuts for fairness
bottom_cut <- 0.3
top_cut <- 0.7
# fairness
fairness <- pbeta(top_cut, alpha, beta) - pbeta(bottom_cut, alpha, beta)
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# plot
data.frame(dist = "beta") %>%
ggplot(aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_halfeye(aes(fill = stat(x < bottom_cut | x > top_cut)),
color=NA,
alpha=0.5,
show.legend = FALSE) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80")
)
# plot
ggplot(data = df, aes(x = theta)) +
stat_halfeye(aes(fill = stat(x < bottom_cut | x > top_cut)),
color=NA,
alpha=0.5,
show.legend = FALSE) +
xlim(0, 1) +
theme_minimal()
# plot
ggplot(data = df, aes(x = theta)) +
stat_halfeye(aes(fill = stat(x < bottom_cut | x > top_cut)),
color=NA,
alpha=0.5,
show.legend = FALSE) +
xlim(0, 1) +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
# set parameters
alpha <- 6
beta <- 6
# bottom and top cuts for fairness
bottom_cut <- 0.3
top_cut <- 0.7
# fairness
fairness <- pbeta(top_cut, alpha, beta) - pbeta(bottom_cut, alpha, beta)
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# plot
df <- data.frame(dist = "beta")
ggplot(data = df, aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_halfeye(aes(fill = stat(x < bottom_cut | x > top_cut)),
color=NA,
alpha=0.5,
show.legend = FALSE) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
# plot
ggplot(data = df, aes(x = theta)) +
stat_halfeye(aes(fill = stat(x < bottom_cut | x > top_cut)),
color=NA,
alpha=0.5,
show.legend = FALSE) +
xlim(0, 1) +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
# mean and mcse of theta
mcse(df$theta)
# fairness
bottom_cut <- 0.3
top_cut <- 0.7
df_fair <- df %>% filter(theta > bottom_cut & theta < top_cut)
fairness <- nrow(df_fair) / nrow(df)
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# convert theta draws to data frame
df <- as_draws_df(fit$draws("theta"))
# mean and mcse of theta
mcse(df$theta)
# fairness
bottom_cut <- 0.3
top_cut <- 0.7
df_fair <- df %>% filter(theta > bottom_cut & theta < top_cut)
fairness <- nrow(df_fair) / nrow(df)
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# plot
ggplot(data = df, aes(x = theta)) +
stat_halfeye(aes(fill = stat(x < bottom_cut | x > top_cut)),
color=NA,
alpha=0.5,
show.legend = FALSE) +
xlim(0, 1) +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
# libraries
library(cmdstanr)  # for interfacing Stan
library(ggplot2)   # for visualizations
library(ggdist)    # for distribution visualizations
library(tidyverse) # for data prep
library(posterior) # for extracting samples
library(bayesplot) # for some quick MCMC visualizations
library(mcmcse)    # for comparing samples and calculating MCSE
# compile the model
model <- cmdstan_model("./models/linear.stan")
# prepare the data
data <- read.csv("./data/toy.csv")
# prepare input for Stan
stan_data <- list(n = nrow(data), x = data$x, y = data$y)
# fit
fit <- model$sample(
data = stan_data
)
# traceplot
mcmc_trace(fit$draws())
# summary
fit$summary()
# lines and confidence in lines
df <- as_draws_df(fit$draws())
# plot only 100 random regression lines
df_100 <- sample_n(df, 100)
# visualize data points with regression lines in the background
ggplot() +
geom_point(data=data, aes(x=x, y=y), shape=16, color="#67a9cf") +
geom_abline(data=df_100, aes(slope=b, intercept=a), alpha=0.05, size=1, color="#67a9cf") +
theme_minimal()
# visualize data points with regression lines in the background
ggplot() +
geom_point(data=data, aes(x=x, y=y), shape=16, color="#67a9cf") +
geom_abline(data=df_100, aes(slope=b, intercept=a), alpha=0.05, size=1, color="#67a9cf") +
theme_minimal()
# prepare the data
data <- read.csv("../data/toy.csv")
# prepare input for Stan
stan_data <- list(n = nrow(data), x = data$x, y = data$y)
# fit
fit <- model$sample(
data = stan_data
)
# compile the model
model <- cmdstan_model("../models/linear.stan")
# prepare the data
data <- read.csv("../data/toy.csv")
# prepare input for Stan
stan_data <- list(n = nrow(data), x = data$x, y = data$y)
# fit
fit <- model$sample(
data = stan_data
)
# traceplot
mcmc_trace(fit$draws())
# summary
fit$summary()
# lines and confidence in lines
df <- as_draws_df(fit$draws())
# plot only 100 random regression lines
df_100 <- sample_n(df, 100)
# visualize data points with regression lines in the background
ggplot() +
geom_point(data=data, aes(x=x, y=y), shape=16, color="#67a9cf") +
geom_abline(data=df_100, aes(slope=b, intercept=a), alpha=0.05, size=1, color="#67a9cf") +
theme_minimal()
# sequence
y <- c(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0)
# number of flips
n <- length(y)
# number of heads
z <- sum(y)
library(ggplot2)
library(ggdist)
library(distributional)
library(tidyverse)
# set parameters
alpha <- 10
beta <- 5
# precision
data.frame(dist = "beta") %>%
ggplot(aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_halfeye(alpha = 0.5, fill = "#67a9cf", color = NA) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal()
# libraries
library(ggplot2)
library(ggdist)
library(distributional)
library(tidyverse)
# set parameters
alpha <- 10
beta <- 5
# plot
df <- data.frame(dist = "beta")
ggplot(data = df, aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_halfeye(alpha = 0.5, fill = "#67a9cf", color = NA) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal()
# libraries
library(ggplot2)
library(ggdist)
library(distributional)
# set parameters
alpha <- 6
beta <- 6
# bottom and top cuts for fairness
bottom_cut <- 0.3
top_cut <- 0.7
# fairness
fairness <- pbeta(top_cut, alpha, beta) - pbeta(bottom_cut, alpha, beta)
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# plot
df <- data.frame(dist = "beta")
ggplot(data = df, aes(y = 0, dist = dist, arg1 = alpha, arg2 = beta)) +
stat_dist_halfeye(aes(fill = stat(x < bottom_cut | x > top_cut)),
color=NA,
alpha=0.5,
show.legend = FALSE) +
xlim(0, 1) +
xlab("probability") +
ylab("density") +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
# libraries
library(cmdstanr)  # for interfacing Stan
library(ggplot2)   # for visualizations
library(ggdist)    # for distribution visualizations
library(tidyverse) # for data prep
library(posterior) # for extracting samples
library(bayesplot) # for some quick MCMC visualizations
library(mcmcse)    # for comparing samples and calculating MCSE
library(ggdist)    # for distribution visualizations
# compile the model
model <- cmdstan_model("../models/bernoulli_beta.stan")
# prepare the data
n <- 12
y <- c(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0)
# prepare input data
stan_data <- list(n = n, y = y)
# fit
fit <- model$sample(
data = stan_data
)
# traceplot
mcmc_trace(fit$draws("theta"))
# summary
fit$summary()
# convert theta draws to data frame
df <- as_draws_df(fit$draws("theta"))
# mean and mcse of theta
mcse(df$theta)
# fairness
bottom_cut <- 0.3
top_cut <- 0.7
df_fair <- df %>% filter(theta > bottom_cut & theta < top_cut)
fairness <- nrow(df_fair) / nrow(df)
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# plot
ggplot(data = df, aes(x = theta)) +
stat_halfeye(aes(fill = stat(x < bottom_cut | x > top_cut)),
color=NA,
alpha=0.5,
show.legend = FALSE) +
xlim(0, 1) +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# libraries
library(cmdstanr)  # for interfacing Stan
library(ggplot2)   # for visualizations
library(posterior) # for extracting samples
library(bayesplot) # for some quick MCMC visualizations
library(mcmcse)    # for comparing samples and calculating MCSE
# compile the model
model <- cmdstan_model("../models/linear.stan")
# prepare the data
data <- read.csv("../data/toy.csv")
# prepare input for Stan
stan_data <- list(n = nrow(data), x = data$x, y = data$y)
# fit
fit <- model$sample(
data = stan_data
)
# traceplot
mcmc_trace(fit$draws())
# summary
fit$summary()
# lines and confidence in lines
df <- as_draws_df(fit$draws())
# params
mcse(df$a)
mcse(df$b)
mcse(df$sigma)
# plot only 100 random regression lines
df_100 <- sample_n(df, 100)
# visualize data points with regression lines in the background
ggplot() +
geom_point(data=data, aes(x=x, y=y), shape=16, color="#67a9cf") +
geom_abline(data=df_100, aes(slope=b, intercept=a), alpha=0.05, size=1, color="#67a9cf") +
theme_minimal()
# libraries
library(cmdstanr)  # for interfacing Stan
library(ggplot2)   # for visualizations
library(ggdist)    # for distribution visualizations
library(tidyverse) # for data prep
library(posterior) # for extracting samples
library(bayesplot) # for some quick MCMC visualizations
library(mcmcse)    # for comparing samples and calculating MCSE
library(ggdist)    # for distribution visualizations
# compile the model
model <- cmdstan_model("../models/bernoulli_beta.stan")
# prepare the data
n <- 12
y <- c(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0)
# prepare input data
stan_data <- list(n = n, y = y)
# fit
fit <- model$sample(
data = stan_data
)
# traceplot
mcmc_trace(fit$draws("theta"))
# summary
fit$summary()
# convert theta draws to data frame
df <- as_draws_df(fit$draws("theta"))
# mean and mcse of theta
mcse(df$theta)
# fairness
bottom_cut <- 0.3
top_cut <- 0.7
df_fair <- df %>% filter(theta > bottom_cut & theta < top_cut)
fairness <- nrow(df_fair) / nrow(df)
cat(paste0("Fairness of the coin is: ", format(fairness, digits = 3), "."))
# plot
ggplot(data = df, aes(x = theta)) +
stat_halfeye(aes(fill = stat(x < bottom_cut | x > top_cut)),
color=NA,
alpha=0.5,
show.legend = FALSE) +
xlim(0, 1) +
theme_minimal() +
scale_fill_manual(values = c("#67a9cf", "grey80"))
# libraries
library(cmdstanr)  # for interfacing Stan
library(ggplot2)   # for visualizations
library(posterior) # for extracting samples
library(bayesplot) # for some quick MCMC visualizations
library(mcmcse)    # for comparing samples and calculating MCSE
# compile the model
model <- cmdstan_model("../models/linear.stan")
# prepare the data
data <- read.csv("../data/toy.csv")
# prepare input for Stan
stan_data <- list(n = nrow(data), x = data$x, y = data$y)
# fit
fit <- model$sample(
data = stan_data
)
# traceplot
mcmc_trace(fit$draws())
# summary
fit$summary()
# lines and confidence in lines
df <- as_draws_df(fit$draws())
# params
mcse(df$a)
mcse(df$b)
# plot only 100 random regression lines
df_100 <- sample_n(df, 100)
# visualize data points with regression lines in the background
ggplot() +
geom_point(data = data,
aes(x = x, y = y),
shape = 16,
color = "#67a9cf") +
geom_abline(data = df_100,
aes(slope = b, intercept = a),
alpha=0.05,
size=1,
color="#67a9cf") +
theme_minimal()
# libraries
library(cmdstanr)  # for interfacing Stan
library(ggplot2)   # for visualizations
library(posterior) # for extracting samples
library(bayesplot) # for some quick MCMC visualizations
library(mcmcse)    # for comparing samples and calculating MCSE
# prepare the data
data <- read.csv("../data/toy.csv")
# prepare input for Stan
stan_data <- list(n = nrow(data), x = data$x, y = data$y)
# fit
fit <- model$sample(
data = stan_data
)
# traceplot
mcmc_trace(fit$draws())
# summary
fit$summary()
# lines and confidence in lines
df <- as_draws_df(fit$draws())
# params
mcse(df$a)
mcse(df$b)
# plot only 100 random regression lines
df_100 <- sample_n(df, 100)
# visualize data points with regression lines in the background
ggplot() +
geom_point(data = data,
aes(x = x, y = y),
shape = 16,
color = "#67a9cf") +
geom_abline(data = df_100,
aes(slope = b, intercept = a),
alpha=0.05,
size=1,
color="#67a9cf") +
theme_minimal()
# plot only 100 random regression lines
df_100 <- sample_n(df, 100)
# compile the model
model <- cmdstan_model("../models/linear.stan")
# prepare the data
data <- read.csv("../data/toy.csv")
# prepare input for Stan
stan_data <- list(n = nrow(data), x = data$x, y = data$y)
# fit
fit <- model$sample(
data = stan_data
)
# traceplot
mcmc_trace(fit$draws())
# summary
fit$summary()
# lines and confidence in lines
df <- as_draws_df(fit$draws())
# params
mcse(df$a)
mcse(df$b)
# plot only 100 random regression lines
df_100 <- sample_n(df, 100)
library(tidyverse) # for data manipulations
# plot only 100 random regression lines
df_100 <- sample_n(df, 100)
# visualize data points with regression lines in the background
ggplot() +
geom_point(data = data,
aes(x = x, y = y),
shape = 16,
color = "#67a9cf") +
geom_abline(data = df_100,
aes(slope = b, intercept = a),
alpha=0.05,
size=1,
color="#67a9cf") +
theme_minimal()
